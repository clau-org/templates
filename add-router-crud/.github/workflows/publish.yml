name: Publish release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: "Select type of version increment"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

run-name: "[${{ github.ref == 'refs/heads/main' && inputs.version || 'patch' }}] - Commit message '${{ github.event.head_commit.message }}'"

env:
  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_OPTIONS: "--max_old_space_size=4096"
  DENO_DEPLOY_TOKEN: ${{ secrets.DENO_DEPLOY_TOKEN }}

jobs:
  publish:
    name: Publish release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip]')"

    steps:
      - name: Checkout code üìÅ
        uses: actions/checkout@v3

      - name: Install Deno ‚¨áÔ∏è
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Test
        run: deno task test

      - name: Update version
        id: update_version
        run: |
          # Read the current version from deno.json
          VERSION=$(jq -r '.version' deno.json)

          # Split the version string into major, minor, and patch parts
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Increment the version based on the input parameter
          case "${{ github.event.inputs.version }}" in
            "major") MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0;;
            "minor") MINOR=$((MINOR + 1)); PATCH=0;;
            *) PATCH=$((PATCH + 1));;
          esac

          # Update the version string in deno.json
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          sed -i "s/\"version\": \"$VERSION\"/\"version\": \"$NEW_VERSION\"/g" deno.json

          # Commit the updated version and push the changes
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git commit -a -m "Bump version to $NEW_VERSION"
          git push
          echo "::set-output name=new_version::$NEW_VERSION"

      - name: Create Tag
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git tag v${{ steps.update_version.outputs.new_version }}
          git push origin v${{ steps.update_version.outputs.new_version }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.update_version.outputs.new_version }}
          release_name: Release v${{ steps.update_version.outputs.new_version }}
          draft: false
          prerelease: false
